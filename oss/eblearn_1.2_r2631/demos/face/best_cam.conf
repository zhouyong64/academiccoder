#set whether to process in color or grayscale
mode = color #grayscale


# network ######################################################################
net = cscsc # net archictecture
manual_load = 0 # manually load weights for individual modules

arch = ${arch_${net}} # global architecture
mirror = 0 # mirror instead of zero-padding (default)
nonlin = tanh # stdsig # non-linearity module

# layers
c0 = conv0,addc0,${nonlin}0,abs0,wstd0
s1 = subs1,addc1,${nonlin}1
c2 = conv2,addc2,${nonlin}2,abs2,wstd2
s3 = subs3,addc3,${nonlin}3
c4 = conv4,addc4,${nonlin}4
f5 = linear5,addc5,${nonlin}5

# machines
arch_cscsc = ${pp_detect},${c0},${s1},${c2},${s3},${c4}
arch_cscscf = ${pp_detect},${c0},${s1},${c2},${s3},${c4},${f5}

answer = class_answer

background_name = bg

# preprocessing modules
pp_y = rgb_to_y0
pp_yuv = rgb_to_yuv0
pp_yp = rgb_to_yp0
pp_ypuv = rgb_to_ypuv0
rgb_to_ypuv0_kernel = 7x7
rgb_to_ypuv0_mirror = 1
rgb_to_ypuv0_global_norm = 0
y_to_yp0_kernel = 7x7
y_to_yp0_mirror = 1
y_to_yp0_global_norm = 0
resizepp0_pp = ${pp_${mode}}
pp_color = rgb_to_ypuv0
pp_grayscale = y_to_yp0
resizepp0_zpad = 
pp_train = #rgb_to_ypuv0 #mschan0
pp_detect = resizepp0

# modules parameters
inputh = 32 # input's height
inputw = 32 # input's width
conv0_kernel = 5x5 # convolution kernel
conv0_stride = 1x1 # convolution stride
conv0_table = #${table0_color${color}} # convolution table (optional)
conv0_table_in = 1 # conv input max, used if table file not defined
conv0_table_out = ${table0_max} # features max, used if table file not defined
wstd0_kernel = 5x5 # normalization kernel
wstd0_gaussian_coeff = 0 # normalization kernel coeffcient
subs1_kernel = 2x2 # subsampling kernel
subs1_stride = ${subs1_kernel} # subsampling stride
addc1_weights = # weights to be loaded if manual_load = 1
conv2_kernel = 5x5 # convolution kernel
conv2_stride = 1x1 # convolution stride
conv2_table = ${table1} # convolution table (optional)
conv2_table_in = thickness # use current thickness as max table input
conv2_table_out = ${table1_max} # features max, used if table file not defined
conv2_weights = #${wroot1}${sp0}${sp1}_layer1_convolution_kernel.mat
addc2_weights = #${wroot1}${sp0}${sp1}_layer2_bias_bias.mat
diag2_weights = #${wroot1}${sp0}${sp1}_layer4_diag_coeff.mat
wstd2_kernel = 5x5 # normalization kernel
wstd2_gaussian_coeff = 0 # normalization kernel coeffcient
subs3_kernel = 2x2 # subsampling kernel
subs3_stride = ${subs3_kernel} # subsampling stride
addc3_weights = # weights to be loaded if manual_load = 1
conv4_kernel = 5x5 # convolution kernel
conv4_stride = 1x1 # convolution stride
conv4_table_in = thickness # use current thickness as max table input
conv4_table_out = noutputs # use number of classes as max table output
linear5_in = 10 # linear module input features size
linear5_out = noutputs # use number of classes as max table output

# tables #######################################################################
tblroot = ../../tools/data/tables/ #${ebl}/tools/data/tables/ # location of table files
# conv0
table0_max = 6 #64 # full table output max (overridden if table file defined)
table1 = ${tblroot}/table_6_16_connect_60.mat

# detection ####################################################################
weights=${root2}/trained/20100227.175046.face_conf05_eta_.000005_retrain_1_net044.mat
classes=${root2}/trained/20100227.175046.face_conf05_eta_.000005_retrain_1_classes.mat
threshold=.5
gain=1
input_height=240 #120#480
input_width=320 #160#640
input_max=800
# multi-scaling type. 0: manually set each scale sizes, 1: manually set each
# scale step, 2: number of scales between min and max, 3: step factor between
# min and max, 4: 1 scale, the original image size.
scaling_type = 3
# scaling ratio between scales
scaling = 1.3
# scale factor of maximum resolution of the original resolution
max_scale = 1.0
# scale factor of minimum resolution of the original resolution
min_scale = 1.0
# number of detection threads
nthreads = 1
# randomize image input list (only works for 'directory' camera).
input_random = 0
# number of passes on the image input list (only works for 'directory' camera).
input_npasses = 1
# height factor to apply to bounding boxes
bbhfactor = 1
# width factor to apply to bounding boxes
bbwfactor = 1
# prune overlapping bounding boxes or not
pruning = 1
# minimum height ratio with smallest bbox to declare overlap
bbh_overlap = .67
# minimum width ratio with smallest bbox to declare overlap
bbw_overlap = 0
hzpad = .5 # vertical zero padding on each side
wzpad = .5 # horizontal zero padding on each side
mem_optimization = 1
max_bb_overlap = .7 # minimum ratio with smallest bbox to declare overlap
min_hcenter_dist = .3 # centers closer than this ratio over height cancel out
min_wcenter_dist = .3 # centers closer than this ratio over width cancel out
confidence_type = 2 # 0: sqrdist 1: single output 2: max other (recommended)

# detection display ############################################################
# output saving and display
save_detections=0
# save each classified frame and make a video out of it
save_video=0
# fps at which video should be constructed
save_video_fps=1
# if loaded a video and equal to 1, reuse video's fps
use_original_fps=0
# enable or disable display
display = 1
display_threads = 0 # each thread displays on its own
# only show classified input
minimal_display = 1
silent = 1 # minimize outputs to be printed
sync_outputs = 0 # synchronize output between threads
# display internal states of network
display_states = 0
display_min = -1.7
display_max = 1.7
display_in_min = 0 # input image min display range
display_in_max = 255 # input image max display range
display_bb_transparency = 0 #0.3
display_sleep = 0 # sleep in milliseconds after displaying
ninternals=1
# demo display variables
queue1 = 0
qstep1 = 1
qheight1 = 5
qwidth1 = 2
queue2 = 0
qstep2 = 50
qheight2 = 5
qwidth2 = 5
# pre-camera variables (used before regular camera)
precamera = 0
precamdir = ${root2}/

# camera options: v4l2 opencv shmem video directory
camera = v4l2 #mcams windows kinect directory opencv shmem
#mcam_type = v4l2 # opencv
#camera_narrow = 0,1,0 # narrow camera input
camera_grayscale = ${${mode}_camg_value} # for output to be grayscale
grayscale_camg_value = 1
color_camg_value = 0
grayscale_camr_value = 0
color_camr_value = 1
camera_rgb = ${${mode}_camr_value} # 0 for YUV, 1 for RGB
device = /dev/video0
#device1 = /dev/video0
#device2 = /dev/video1

file_pattern = ".*[.](png|jpg|jpeg|PNG|JPG|JPEG|bmp|BMP|ppm|PPM|pnm|PNM|pgm|PGM|gif|GIF)"
# limit of input video duration in seconds, 0 means no limit
input_video_max_duration=0

# step between input frames in seconds, 0 means no step
input_video_sstep=1500

job_name=20100227.175046.face_conf05_eta_.000005_retrain_1 # variable added by meta_trainer

threshold = .4 #-1 #1.7 #.9
threshold2 = ${threshold} #10
nms = 0
cluster_nms = 1
scaler_mode = 0
bbox_max_overlap = .2 #.3 .4 .5 .6 .7 .8 .9
bbox_max_overlap2 = ${bbox_max_overlap}
bbox_max_center_dist = .9 #10
bbox_max_center_dist2 = ${bbox_max_center_dist} #.08 #10
bbox_max_wcenter_dist = .5 #10
bbox_max_wcenter_dist2 = ${bbox_max_wcenter_dist} #.08 #10
scaling = 1.8 #1.4 #2.2 1.9 1.6 1.3 1.1
# multi-scaling type. 0: manually set each scale sizes, 1: manually set each
# scale step, 2: number of scales between min and max, 3: step factor between
# min and max, 4: 1 scale, the original image size.
scaling_type = 3
max_scale = 1
#input_max = 288
show_extracted = 2
